<?php

/**
 * @file
 * This is the main script for the Field Permissions module. It merely contains
 * the implementation of hooks invoked by Drupal core and CCK.
 * All common functions are externalized into several scripts that are included
 * on demand to save memory consumption during normal site operation.
 */

/**
 * Indicates that a field does not have any access control.
 */
define('FIELD_PERMISSIONS_PUBLIC', 0);

/**
 * Indicates that a field is private.
 *
 * Private fields are never displayed, and are only editable by the author (and
 * by site administrators with the 'access private fields' permission).
 */
define('FIELD_PERMISSIONS_PRIVATE', 1);

/**
 * Indicates that a field has custom permissions.
 */
define('FIELD_PERMISSIONS_CUSTOM', 2);

/**
 * Implements hook_help().
 */
function field_permissions_help($path, $arg) {
  switch ($path) {
    // Main module help for the Field Permissions module.
    case 'admin/help#field_permissions':
      return '<p>' . t('Set field-level permissions to edit or view CCK fields in any node, edit field during node creation, and edit or view permissions for nodes owned by the current user.') . '</p>';

    // Help for the Field Permissions overview page.
    case 'admin/reports/fields/permissions':
      return '<p>' . t('Report and troubleshoot field permissions.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function field_permissions_menu() {
  $items['admin/reports/fields/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/reports/fields/permissions'] = array(
    'title' => 'Permissions',
    'description' => 'Report and troubleshoot field permissions.',
    'page callback' => 'field_permissions_overview',
    'access arguments' => array('administer field permissions'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  // @todo: what to do with non-node objects?
/*
  $items['admin/structure/field_permissions/troubleshooting'] = array(
    'title' => 'Troubleshooting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_permissions_troubleshooting_form'),
    'access arguments' => array('administer field permissions'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['field_permissions/autocomplete'] = array(
    'title' => 'Field permissions autocomplete',
    'page callback' => 'field_permissions_autocomplete',
    'access arguments' => array('administer field permissions'),
    'file' => 'includes/admin.inc',
    'type' => MENU_CALLBACK,
  );
//*/
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function field_permissions_theme() {
  return array(
    'field_permissions_troubleshooting_form' => array('render element' => 'form', 'file' => 'includes/admin.inc'),
  );
}

/**
 * Implementation of hook_permission().
 */
function field_permissions_permission() {
  module_load_include('inc', 'field_permissions', 'includes/admin');
  return _field_permissions_permission();
}

/**
 * Implements of hook_form_FORM_ID_alter().
 */
function field_permissions_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  // Injects the Field Permissions settings on the Edit field tab.
  module_load_include('inc', 'field_permissions', 'includes/admin');
  return _field_permissions_field_settings_form_alter($form, $form_state, $form_id);
}

/**
 * Implementation of hook_field_access().
 *
 * @param $op
 *   The operation to be performed. Possible values:
 *   - 'edit'
 *   - 'view'
 * @param $field
 *   The field on which the operation is to be performed.
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $object
 *   The object on which the operation is to be performed.
 * @param $account
 *   The account to check.
 *
 * @return
 *   FALSE if the operation is not allowed.
 *   Note when field_access() is invoked, access is granted unless one
 *   implementation of hook_field_access() explicitly returns FALSE.
 *
 * @see field_access()
 */
function field_permissions_field_access($op, $field, $obj_type, $object, $account) {
  // Ignore the request if permissions have not been enabled for this field.
  if (!isset($field['field_permissions']['type']) || $field['field_permissions']['type'] == FIELD_PERMISSIONS_PUBLIC) {
    return;
  }
  // If the field is private, then only the author (and administrators with the
  // 'access private fields' permissions) can view and edit it.
  elseif ($field['field_permissions']['type'] == FIELD_PERMISSIONS_PRIVATE) {
    if (user_access('access private fields', $account)) {
      return TRUE;
    }
    else {
      if (!isset($object) && $op == 'view') {
        // See comments in _field_permissions_field_view_access() about why we
        // need to return TRUE in this situation for Views to work correctly
        // (and why it should be safe to do so).
        return TRUE;
      }
      else {
        module_load_include('inc', 'field_permissions', 'includes/field_access');
        return _field_permissions_object_is_owned_by_account($object, $account);
      }
    }
  }
  // Otherwise, check access by permission.
  elseif ($field['field_permissions']['type'] == FIELD_PERMISSIONS_CUSTOM) {
    module_load_include('inc', 'field_permissions', 'includes/field_access');
    if ($op == 'view') {
      return _field_permissions_field_view_access($field['field_name'], $obj_type, $object, $account);
    }
    elseif ($op == 'edit') {
      return _field_permissions_field_edit_access($field['field_name'], $obj_type, $object, $account);
    }
  }
}
